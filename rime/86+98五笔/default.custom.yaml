# Rime settings
# encoding: utf-8
# by: 空山明月
# date: 2024-05-27
patch:
  # 菜单中可选的方案列表，可根据喜好自行调整顺序，第一位为默认方案
  schema_list:
    - {schema: wubi86}              # 86五笔
    - {schema: wubi98}              # 98五笔
    - {schema: luna_pinyin_simp}    # 明月拼音
    - {schema: terra_pinyin}        # 地球拼音 
    - {schema: wb86_spelling}       # 伪方案-86五笔拆字
    - {schema: wb98_spelling}       # 伪方案-98五笔拆字
    
  switcher:
    caption: 〈菜单项〉
    hotkeys:
      - Control+0
      - Control+Shift+0
    save_options:
      - full_shape
      - ascii_punct
      - simplification
      - extended_charset
      - zh_hant
      - zh_hans
      - zh_hant_tw
    fold_options: true
    abbreviate_options: true
    option_list_separator: '／'

#-----------------------------------------------
  # 中英文切换自定义
  #-----------------------------------------------
  # inline_ascii  在输入法的临时英文编辑区内输入字母，数字，符号，空格等，回车上屏后自动复位到中文
  # commit_text   已输入的候选文字上屏并切换至英文输入模式
  # commit_code   已输入的编码字符上屏并切换至英文输入模式
  # -----------------------------------------------
  # 参考链接： https://gist.github.com/lotem/2981316

  ascii_composer:
    good_old_caps_lock: true       # true: 在保持 cap 键原有的特征， false: 点击不会切换大小写
    switch_key:
      Caps_Lock: commit_code        # 如果想用 cap 键切换中英文输入，就修改为上面三种的任一一种，否则用 noop
      Shift_L: commit_code          # macOs 上 shift 键不区别左右，设置参数同上
      Shift_R: commit_code
      Control_L: noop
      Control_R: noop


  key_binder:
    bindings:
#      - { when: has_menu, accept: comma, send: 2 }  # 候选2 用逗号选择 （修改的时候不要多加或少加空格，跟前面的对齐就好了）
#      - { when: has_menu, accept: period, send: 3 } # 候选3 用句号选择
      - { when: has_menu, accept: semicolon, send: 2 }  # 候选2 用分号
      - { when: has_menu, accept: apostrophe, send: 3 } # 候选3 用单引号

      # 上下翻页 [ ]
      - { when: has_menu, accept: bracketleft, send: Page_Up }
      - { when: has_menu, accept: bracketright, send: Page_Down }

      # 上下翻页 - =
      - { when: has_menu, accept: minus, send: Page_Up }
      - { when: has_menu, accept: equal, send: Page_Down }
      
      # 上下翻页 tab
      - { when: has_menu, accept: Tab, send: Page_Down }

      # 回车清码
      - { when: composing, accept: Return, send: Escape }

      # 两种按键配置，鼠须管 Control+Shift+4 生效，小狼毫 Control+Shift+dollar 生效，都写上了。
      # numbered_mode_switch:
      - { when: always, select: .next, accept: Control+1 }                          # 在最近的两个方案之间切换
      - { when: always, toggle: simplification, accept: Control+2 }                 # 切换简繁
      - { when: always, toggle: extended_charset, accept: Control+3 }               # 切换CJK字符集
      - { when: always, toggle: full_shape, accept: Control+4 }                     # 切换全半角
      - { when: always, toggle: ascii_punct, accept: Control+5 }                    # 切换中英标点

      # emacs key bindings, copy from https://github.com/rime/rime-prelude/blob/master/key_bindings.yaml
      - { when: composing, accept: Control+p, send: Up }
      - { when: composing, accept: Control+n, send: Down }
      - { when: composing, accept: Control+b, send: Left }
      - { when: composing, accept: Control+f, send: Right }
      - { when: composing, accept: Control+a, send: Home }
      - { when: composing, accept: Control+e, send: End }
      - { when: composing, accept: Control+d, send: Delete }
      - { when: composing, accept: Control+k, send: Shift+Delete }
      - { when: composing, accept: Control+h, send: BackSpace }
      - { when: composing, accept: Control+g, send: Escape }
      - { when: composing, accept: Control+bracketleft, send: Escape }
      - { when: composing, accept: Alt+v, send: Page_Up }
      - { when: composing, accept: Control+v, send: Page_Down }

      # 将小键盘 0~9 . 映射到主键盘，数字金额大写的 Lua 如 R1234.5678 可使用小键盘输入
      - {accept: KP_0, send: 0, when: composing}
      - {accept: KP_1, send: 1, when: composing}
      - {accept: KP_2, send: 2, when: composing}
      - {accept: KP_3, send: 3, when: composing}
      - {accept: KP_4, send: 4, when: composing}
      - {accept: KP_5, send: 5, when: composing}
      - {accept: KP_6, send: 6, when: composing}
      - {accept: KP_7, send: 7, when: composing}
      - {accept: KP_8, send: 8, when: composing}
      - {accept: KP_9, send: 9, when: composing}
      - {accept: KP_Decimal,  send: period  , when: composing}
      - {accept: KP_Multiply, send: asterisk, when: composing}
      - {accept: KP_Add,      send: plus,     when: composing}
      - {accept: KP_Subtract, send: minus,    when: composing}
      - {accept: KP_Divide,   send: slash,    when: composing}

  punctuator:
    full_shape:
      ' ' : { commit: '　' }
      ',' : { commit: ， }
      '.' : { commit: 。 }
      '<' : [ 《, 〈, «, ‹ ]
      '>' : [ 》, 〉, », › ]
      '/' : [ ／, ÷ ]
      '?' : { commit: ？ }
      ';' : { commit: ； }
      ':' : { commit: ： }
      '''' : { pair: [ '‘', '’' ] }
      '"' : { pair: [ '“', '”' ] }
      '\' : [ 、, ＼ ]
      '|' : [ ·, ｜, '§', '¦' ]
      '`' : ｀
      '~' : ～
      '!' : { commit: ！ }
      '@' : [ ＠, ☯ ]
      '#' : [ ＃, ⌘ ]
      '%' : [ ％, '°', '℃' ]
      '$' : [ ￥, '$', '€', '£', '¥', '¢', '¤' ]
      '^' : { commit: …… }
      '&' : ＆
      '*' : [ ＊, ·, ・, ×, ※, ❂ ]
      '(' : （
      ')' : ）
      '-' : －
      '_' : ——
      '+' : ＋
      '=' : [ ＝, 々, 〃 ]
      '[' : [ 「, 【, 〔, ［, 〚, 〘 ]
      ']' : [ 」, 】, 〕, ］, 〛,〙 ]
      '{' : [ 『, 〖, ｛ ]
      '}' : [ 』, 〗, ｝ ]
    half_shape:
      ',' : { commit: ， }
      '.' : { commit: 。 }
      '<' : [ 《, 〈, «, ‹, ˂, ˱ ]
      '>' : [ 》, 〉, », ›, ˃, ˲ ]
      '/' : [ 、, ､, '/', ／, ÷ ]
      '?' : { commit: ？ }
      ';' : { commit: ； }
      ':' : { commit: ： }
      '''' : { pair: [ '‘', '’' ] }
      '"' : { pair: [ '“', '”' ] }
      '\' : [ 、, '\', ＼ ]
      '|' : [ ·, ・, '|', ｜, '§', '¦', '‖' ]
      '`' : [ '`', ‵, ‶, ‷, ′, ″, ‴, ⁗ ]
      '~' : [ '~', ～, ˜, ˷, ⸯ, ≈, ≋, ≃, ≅, ≇, ∽, ⋍, ≌, ﹏, ﹋, ﹌ ]
      '!' : { commit: ！ }
      '@' : [ '@', ©, ®, ℗ ]
      '#' : [ '#', № ]
      '%' : [ '%', ％, '°', '℃', ‰, ‱, ℉, ℅, ℆, ℀, ℁, ⅍ ]
      '$' : [ ￥, '$', '€', '£', '¥', '¢', '¤', ₩ ]
      '^' : { commit: …… }
      '&' : '&'
      '*' : [ '*', ＊, ·, ・, ×, ※, ❂, ⁂, ☮, ☯, ☣ ]
      '(' : （
      ')' : ）
      '-' : '-'
      '_' : ——
      '+' : '+'
      '=' : [ '=', 々, 〃 ]
      '[' : [ 「, 【, 〔, ［ ]
      ']' : [ 」, 】, 〕,  ］ ]
      '{' : [ 『, 〖, ｛ ]
      '}' : [ 』, 〗, ｝ ]

  recognizer:
    patterns:  # 一些常见的英文组合，当正则匹配到这些时，都不会生成候选词，而只输入英文
      email: "^[-_.0-9A-Za-z]+@.*$"
      uppercase: "[A-Z][-_+.'0-9A-Za-z]*$"
      url: "^(www[.]|https?:|ftp[.:]|mailto:|file:|localhost).*$|^[a-z]+[.].+$"

  menu:
    page_size: 8
    # alternative_select_labels: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]

# 按键速查
# https://github.com/LEOYoon-Tsaw/Rime_collections/blob/master/Rime_description.md
# （没有 Command 键，不支持）
# accept 和 send 可用字段除 A-Za-z0-9 外，还包含以下键盘上实际有的键：
# （区分大小写）
# BackSpace 退格
# Tab 水平定位符
# Linefeed  换行
# Clear 清除
# Return  回车
# Pause 暂停
# Sys_Req 印屏
# Escape  退出
# Delete  删除
# Home  原位
# Left  左箭头
# Up  上箭头
# Right 右箭头
# Down  下箭头
# Prior、Page_Up 上翻
# Next、Page_Down  下翻
# End 末位
# Begin 始位
# Shift_L 左Shift
# Shift_R 右Shift
# Control_L 左Ctrl
# Control_R 右Ctrl
# Meta_L  左Meta
# Meta_R  右Meta
# Alt_L 左Alt
# Alt_R 右Alt
# Super_L 左Super
# Super_R 右Super
# Hyper_L 左Hyper
# Hyper_R 右Hyper
# Caps_Lock 大写锁
# Shift_Lock  上档锁
# Scroll_Lock 滚动锁
# Num_Lock  小键板锁
# Select  选定
# Print 打印
# Execute 运行
# Insert  插入
# Undo  还原
# Redo  重做
# Menu  菜单
# Find  搜寻
# Cancel  取消
# Help  帮助
# Break 中断
# space 空格
# exclam  !
# quotedbl  "
# numbersign  #
# dollar  $
# percent %
# ampersand &
# apostrophe  '
# parenleft (
# parenright  )
# asterisk  *
# plus  +
# comma ,
# minus -
# period  .
# slash /
# colon :
# semicolon ;
# less  <
# equal =
# greater >
# question  ?
# at  @
# bracketleft [
# backslash \
# bracketright  ]
# asciicircum ^
# underscore  _
# grave `
# braceleft {
# bar |
# braceright  }
# asciitilde  ~
# KP_Space  小键板空格
# KP_Tab  小键板水平定位符
# KP_Enter  小键板回车
# KP_Delete 小键板删除
# KP_Home 小键板原位
# KP_Left 小键板左箭头
# KP_Up 小键板上箭头
# KP_Right  小键板右箭头
# KP_Down 小键板下箭头
# KP_Prior、KP_Page_Up 小键板上翻
# KP_Next、KP_Page_Down  小键板下翻
# KP_End  小键板末位
# KP_Begin  小键板始位
# KP_Insert 小键板插入
# KP_Equal  小键板等于
# KP_Multiply 小键板乘号
# KP_Add  小键板加号
# KP_Subtract 小键板减号
# KP_Divide 小键板除号
# KP_Decimal  小键板小数点
# KP_0  小键板0
# KP_1  小键板1
# KP_2  小键板2
# KP_3  小键板3
# KP_4  小键板4
# KP_5  小键板5
# KP_6  小键板6
# KP_7  小键板7
# KP_8  小键板8
# KP_9  小键板9
